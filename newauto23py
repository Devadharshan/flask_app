import logging
import os
import time
from subprocess import Popen, PIPE
from resource import getrusage, RUSAGE_SELF  # For CPU/memory stats
from opentelemetry import trace
from opentelemetry.instrumentation.auto_instrumentation import run_with_auto_instrumentation
from opentelemetry.metrics import get_meter_provider
from opentelemetry.sdk.metrics import MeterProvider
from opentelemetry.sdk.metrics.export import PeriodicExportingMetricReader
from opentelemetry.exporter.otlp.proto.grpc.metric_exporter import OTLPMetricExporter
from opentelemetry.sdk.resources import Resource
from opentelemetry.sdk.trace import TracerProvider
from opentelemetry.sdk.trace.export import BatchSpanProcessor
from opentelemetry.exporter.otlp.proto.grpc.trace_exporter import OTLPSpanExporter
from lib.logger import logger  # Assuming your logger.py is set up
from lib.tracer import tracer  # Assuming your tracer.py is set up

# Initialize logger
logger = logging.getLogger(__name__)

# OpenTelemetry setup
resource = Resource.create(attributes={"service.name": "autosys-job-checker"})

# Metrics setup
metric_exporter = OTLPMetricExporter()
metric_reader = PeriodicExportingMetricReader(exporter=metric_exporter, export_interval_millis=60000)
meter_provider = MeterProvider(resource=resource, metric_readers=[metric_reader])
get_meter_provider()._set_meter_provider(meter_provider)

# Tracing setup
trace.set_tracer_provider(TracerProvider(resource=resource))
span_processor = BatchSpanProcessor(OTLPSpanExporter())
trace.get_tracer_provider().add_span_processor(span_processor)
tracer = trace.get_tracer(__name__)

# Create metrics
meter = meter_provider.get_meter("autosys_job_checker_meter")
cpu_metric = meter.create_observable_gauge(
    name="process_cpu_seconds",
    description="CPU time used by the process",
    callbacks=[lambda: [(getrusage(RUSAGE_SELF).ru_utime, {})]],  # User CPU time
)
memory_metric = meter.create_observable_gauge(
    name="process_memory_bytes",
    description="Memory usage of the process",
    callbacks=[lambda: [(os.sysconf("SC_PAGE_SIZE") * os.sysconf("SC_PHYS_PAGES"), {})]],  # Physical memory
)

# Function to check Autosys job status for a given pattern
def check_autosys_jobs(pattern):
    logger.info(f"Checking Autosys jobs for pattern: {pattern}")

    # Run the Autosys command
    try:
        command = f"autorep -J {pattern} -q"
        with Popen(command, shell=True, stdout=PIPE, stderr=PIPE) as process:
            output, error = process.communicate()
            output = output.decode("utf-8")
            error = error.decode("utf-8")

            if process.returncode != 0:
                raise Exception(f"Error running command: {error}")

            # Parse the output for job statuses
            jobs = []
            for line in output.splitlines():
                # Example format: job_name   RUNNING | SUCCESS | FAILED
                if line.strip() and not line.startswith("job_name"):  # Skip header or empty lines
                    job_details = line.split()
                    job_name, job_status = job_details[0], job_details[-1]
                    jobs.append({"name": job_name, "status": job_status})

            return jobs

    except Exception as e:
        logger.error(f"Error checking Autosys jobs: {e}", exc_info=True)
        return []

# Function to process job statuses
def process_job_statuses(pattern, jobs):
    logger.info(f"Processing {len(jobs)} jobs for pattern: {pattern}")

    for job in jobs:
        job_name = job["name"]
        job_status = job["status"]

        # Log and trace each job's status
        with tracer.start_as_current_span("check_autosys_job") as span:
            span.set_attribute("job.name", job_name)
            span.set_attribute("job.status", job_status)
            span.set_attribute("pattern", pattern)

            logger.info(f"Job: {job_name}, Status: {job_status}")

            if job_status not in ["SUCCESS", "RUNNING"]:
                logger.warning(f"Job {job_name} has an unexpected status: {job_status}")
                span.record_exception(Exception(f"Unexpected status: {job_status}"))
                span.set_status(trace.status.Status(trace.status.StatusCode.ERROR, f"Status: {job_status}"))

# Main logic
def main():
    logger.info("Starting Autosys job checker app")

    # Define the patterns to monitor
    patterns = ["job_prefix_*", "daily_jobs_*", "hourly_jobs_*"]

    while True:
        try:
            for pattern in patterns:
                jobs = check_autosys_jobs(pattern)
                process_job_statuses(pattern, jobs)

            # Sleep for a periodic interval
            logger.info("Sleeping for 5 minutes before the next check")
            time.sleep(300)

        except Exception as e:
            logger.error(f"Unexpected error occurred: {e}", exc_info=True)
            time.sleep(60)  # Sleep before retrying

if __name__ == "__main__":
    run_with_auto_instrumentation(main)
